NEXTVI PATCHES
==============
Optional patches for Nextvi.
Apply: patch < name.patch

arrowkeys_normal.patch
--------------
Adds arrows keys support in normal mode.

longbuf.patch
--------------
Overcome 2GB buffer size limitations. Fix all warns Will be able to read very
large files.

threaded_search.patch
--------------
Multithreaded version of lbuf_search(). Adjust the number of threads in use
and buffer stepping in lbuf.c Ensure that your system supports posix threads,
aka libpthread

colors_lnum.patch
--------------
Demonstrates the most simple way one could go about customizing colors for
linenumbers triggered by # keybind without breaking existing syntax
highlights on the c filetype. More complicated approach can be to use
syn_addhl() and a NULL pattern, however that requires more modifications.

hl_part.patch
--------------
Allow syntax highlight to continue past the terminal dimensions up to a
certain limit. To customize the depth, adjust LEDFORW and LEDBACK definitions
in led.c

hl_naive.patch
--------------
Original approach to syntax highlight as in neatvi.
Pros:
1. simpler and shorter code in led_render()
2. unlimited length, can highlight anything pikevm is willing to match.
3. retains correct right to left highlight if option order=0 and td=-2 are set.
Base nextvi will always highlight left to right, unless the line does not
extend past the terminal.
4. Requires a bit less amount of memory to run.
Cons:
1. Terrible performance, need to disable syntax hl if working with lines 10K+
(You've been warned!)
2. Cannot render lines like those by option pac=1 efficiently. Will recompute
the whole string every iteration.
3. Difficult to adapt other kinds of codes to make use of.
Note: Patch is not compatible with hl_part.patch in any way, pick one or the
other.

debug.patch
--------------
Cleanup reachable memory upon termination.
Use for debugging.
Note: in some features leaks won't be freed - for example hlw (which is not
enabled by default) Also initializes sdense in regex.c so that valgrind stops
freaking out.

grep.patch
--------------
Adds a special temporary buffer /grep/ much like the default /hist/ or /fm/.
When new keybind ^x is executed vi performs fs_search on every file and
stores the results in /grep/ buffer. At last, user will be switched to /grep/.
Line information is stored and displayed with special new syntax highlight
rules. Searched keyword is also highlighted.  Use the familiar keybind ^i or
TAB on the wanted line to immediately open the file and goto the line
specified.  Upon next use of ^x keybind, old results get discarded. To re-
open /grep/ without discarding use new keybind vx The format of the lines
stored is specifically designed to mirror the output of grep -r -n "str" .
so that the feature can be substituted with a pipe command in case of a
higher performing grep implementation or loading of cached results from script.

rstr.patch
--------------
Adaptation from upstream neatvi, where simple operations are optimized by
running a specialized search code instead of full regex engine. rstr can
yeild up to 3X faster search on non regex patterns. This is not included in
base nextvi due to underlying complexity.
